/*
Copyright 2022 The OpenFunction Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openfunction/apis/events/v1alpha1"
	v1alpha1info "github.com/quanxiang-cloud/implant/pkg/client/apis/events/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterEventBusLister helps list ClusterEventBuses.
// All objects returned here must be treated as read-only.
type ClusterEventBusLister interface {
	// List lists all ClusterEventBuses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterEventBus, err error)
	// ClusterEventBuses returns an object that can list and get ClusterEventBuses.
	ClusterEventBuses(namespace string) ClusterEventBusNamespaceLister
	ClusterEventBusListerExpansion
}

// clusterEventBusLister implements the ClusterEventBusLister interface.
type clusterEventBusLister struct {
	indexer cache.Indexer
}

// NewClusterEventBusLister returns a new ClusterEventBusLister.
func NewClusterEventBusLister(indexer cache.Indexer) ClusterEventBusLister {
	return &clusterEventBusLister{indexer: indexer}
}

// List lists all ClusterEventBuses in the indexer.
func (s *clusterEventBusLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterEventBus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterEventBus))
	})
	return ret, err
}

// ClusterEventBuses returns an object that can list and get ClusterEventBuses.
func (s *clusterEventBusLister) ClusterEventBuses(namespace string) ClusterEventBusNamespaceLister {
	return clusterEventBusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterEventBusNamespaceLister helps list and get ClusterEventBuses.
// All objects returned here must be treated as read-only.
type ClusterEventBusNamespaceLister interface {
	// List lists all ClusterEventBuses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterEventBus, err error)
	// Get retrieves the ClusterEventBus from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterEventBus, error)
	ClusterEventBusNamespaceListerExpansion
}

// clusterEventBusNamespaceLister implements the ClusterEventBusNamespaceLister
// interface.
type clusterEventBusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterEventBuses in the indexer for a given namespace.
func (s clusterEventBusNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterEventBus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterEventBus))
	})
	return ret, err
}

// Get retrieves the ClusterEventBus from the indexer for a given namespace and name.
func (s clusterEventBusNamespaceLister) Get(name string) (*v1alpha1.ClusterEventBus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1info.Resource("clustereventbus"), name)
	}
	return obj.(*v1alpha1.ClusterEventBus), nil
}
